/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.11 public/models/gazebo/gcd.gltf
*/

import React, { useRef } from 'react'
import { useGLTF, useTexture } from '@react-three/drei';
import { useConfigurator } from '../contexts/Configurator';

import * as THREE from "three";

export function GCD(props) {
  const { nodes, materials } = useGLTF('./models/gazebo/gcd.gltf')

  const { gcdOneTexture, gcdTwoTexture, gcdThreeTexture, gazeboCeilingDrapeOne, gazeboCeilingDrapeTwo, gazeboCeilingDrapeThree } = useConfigurator();

  const materialTextureProps = useTexture({
    map: './gcdTextures/texOne/grey.jpg',
    // displacementMap: './textures/Catacomb_Wall_001_height.png',
    normalMap: './gcdTextures/texOne/grey.jpg',
    roughnessMap: './gcdTextures/texOne/grey.jpg',
    aoMap: './gcdTextures/texOne/grey.jpg',
  })

  materialTextureProps.map.repeat.set(3, 3);
  materialTextureProps.normalMap.repeat.set(3, 3);
  materialTextureProps.roughnessMap.repeat.set(3, 3);
  materialTextureProps.aoMap.repeat.set(3, 3);

  materialTextureProps.map.wrapS =
    materialTextureProps.map.wrapT =
    materialTextureProps.normalMap.wrapS =
    materialTextureProps.normalMap.wrapT =
    materialTextureProps.roughnessMap.wrapS =
    materialTextureProps.roughnessMap.wrapT =
    materialTextureProps.aoMap.wrapS =
    materialTextureProps.aoMap.wrapT =
    THREE.RepeatWrapping;


  const gcdRedTextureProps = useTexture({
    map: './gcdTextures/texTwo/red.jpg',
    // displacementMap: './textures/Catacomb_Wall_001_height.png',
    normalMap: './gcdTextures/texTwo/red.jpg',
    roughnessMap: './gcdTextures/texTwo/red.jpg',
    aoMap: './gcdTextures/texTwo/red.jpg',
  })

  gcdRedTextureProps.map.repeat.set(3, 3);
  gcdRedTextureProps.normalMap.repeat.set(3, 3);
  gcdRedTextureProps.roughnessMap.repeat.set(3, 3);
  gcdRedTextureProps.aoMap.repeat.set(3, 3);

  gcdRedTextureProps.map.wrapS =
    gcdRedTextureProps.map.wrapT =
    gcdRedTextureProps.normalMap.wrapS =
    gcdRedTextureProps.normalMap.wrapT =
    gcdRedTextureProps.roughnessMap.wrapS =
    gcdRedTextureProps.roughnessMap.wrapT =
    gcdRedTextureProps.aoMap.wrapS =
    gcdRedTextureProps.aoMap.wrapT =
    THREE.RepeatWrapping;


  const gcdYellowTextureProps = useTexture({
    map: './gcdTextures/texThree/yellow.jpg',
    // displacementMap: './textures/Catacomb_Wall_001_height.png',
    normalMap: './gcdTextures/texThree/yellow.jpg',
    roughnessMap: './gcdTextures/texThree/yellow.jpg',
    aoMap: './gcdTextures/texThree/yellow.jpg',
  })

  gcdYellowTextureProps.map.repeat.set(3, 3);
  gcdYellowTextureProps.normalMap.repeat.set(3, 3);
  gcdYellowTextureProps.roughnessMap.repeat.set(3, 3);
  gcdYellowTextureProps.aoMap.repeat.set(3, 3);

  gcdYellowTextureProps.map.wrapS =
    gcdYellowTextureProps.map.wrapT =
    gcdYellowTextureProps.normalMap.wrapS =
    gcdYellowTextureProps.normalMap.wrapT =
    gcdYellowTextureProps.roughnessMap.wrapS =
    gcdYellowTextureProps.roughnessMap.wrapT =
    gcdYellowTextureProps.aoMap.wrapS =
    gcdYellowTextureProps.aoMap.wrapT =
    THREE.RepeatWrapping;

  return (
    <group {...props} dispose={null} scale={[0.3, 0.3, 0.3]} >

      {gazeboCeilingDrapeOne === true && (
        <>
          <group position={[-14.04, 2.39, -11.51]} rotation={[0, 1.12, 0]} scale={[0.74, 0.78, 0.39]} >
            <meshStandardMaterial {...gcdOneTexture === 0 ? materialTextureProps
              : gcdOneTexture === 1 ? gcdRedTextureProps
                : gcdYellowTextureProps} />

            <mesh geometry={nodes.Cloth_Shap005.geometry} material={materials['Material-_4Material850.005']} visible={true} >

              <meshStandardMaterial {...gcdOneTexture === 0 ? materialTextureProps
                : gcdOneTexture === 1 ? gcdRedTextureProps
                  : gcdYellowTextureProps} />

            </mesh>

            <mesh geometry={nodes.Cloth_Shap005_1.geometry} material={materials['Material-_4Material850.003']} visible={true} >
              <meshStandardMaterial {...gcdOneTexture === 0 ? materialTextureProps
                : gcdOneTexture === 1 ? gcdRedTextureProps
                  : gcdYellowTextureProps} />
            </mesh>


            <mesh geometry={nodes.Cloth_Shap005_2.geometry} material={materials['Material-_4Material850.004']} visible={true} >

              <meshStandardMaterial {...gcdOneTexture === 0 ? materialTextureProps
                : gcdOneTexture === 1 ? gcdRedTextureProps
                  : gcdYellowTextureProps} />

            </mesh>
          </group>
        </>
      )}

      {gazeboCeilingDrapeTwo === true && (
        <>

          <mesh geometry={nodes.gcdl2.geometry} material={materials['Material-_4Material850.006']} position={[-11.9, 2.58, -10.23]} scale={0.14} visible={true} >
            <meshStandardMaterial {...gcdTwoTexture === 0 ? materialTextureProps
              : gcdTwoTexture === 1 ? gcdRedTextureProps
                : gcdYellowTextureProps} />
          </mesh>
        </>
      )}

      {gazeboCeilingDrapeThree === true && (
        <>
          <mesh geometry={nodes.gcdl3.geometry} material={materials['Material-_4Material850.007']} position={[-11.9, 2.58, -10.23]} scale={0.14} visible={true} >
            <meshStandardMaterial {...gcdThreeTexture === 0 ? materialTextureProps
              : gcdThreeTexture === 1 ? gcdRedTextureProps
                : gcdYellowTextureProps} />
          </mesh>
        </>
      )}

    </group>
  )
}

useGLTF.preload('./models/gazebo/gcd.gltf')
